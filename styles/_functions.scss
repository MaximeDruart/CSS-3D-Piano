@function pi() {
    @return 3.14159265359;
}

$default-threshold: pi()/180/20;

@function fact($number) {
    $value: 1;

    @if $number>0 {
        @for $i from 1 through $number {
            $value: $value * $i;
        }
    }

    @return $value;
}

// stripping unit for px to ratio
@function strip-unit($number) {
    @if type-of($number)=='number'and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }

    @return $number;
}


// returns square root (needed for hypothenuse)
@function sqrt($r) {
    $x0: 1;
    $x1: $x0;

    @for $i from 1 through 10 {
        $x1: $x0 - ($x0 * $x0 - abs($r)) / (2 * $x0);
        $x0: $x1;
    }

    @return $x1;
}

@function pow($number, $exponent) {
    $value: 1;

    @if $exponent>0 {
        @for $i from 1 through $exponent {
            $value: $value * $number;
        }
    }

    @return $value;
}

@function rad($angle) {
    $unit: unit($angle);
    $unitless: $angle / ($angle * 0 + 1);

    // If the angle has 'deg' as unit, convert to radians.
    @if $unit==deg {
        $unitless: $unitless / 180 * pi();
    }

    @return $unitless;
}

@function sin($angle) {
    $sin: 0;
    $angle: rad($angle);

    // Iterate a bunch of times.
    @for $i from 0 through 10 {
        $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);
    }

    @return $sin;
}

@function cos($angle) {
    $cos: 0;
    $angle: rad($angle);

    // Iterate a bunch of times.
    @for $i from 0 through 10 {
        $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);
    }

    @return $cos;
}

@function tan($angle) {
    @return sin($angle) / cos($angle);
}


@function convert-angle($value, $unit-name) {
    $factors: (rad: 1rad,
            deg: 180deg/pi(),
            grad: 200grad/pi(),
            turn: .5turn/pi());

    @if not unitless($value) {
        @warn '`#{$value}` should be unitless';
        @return false;
    }

    @if not map-has-key($factors, $unit-name) {
        @warn 'unit `#{$unit-name}` is not a valid unit - please make sure it is either `deg`, `rad`, `grad` or `turn`';
        @return false;
    }

    @return $value*map-get($factors, $unit-name);
}

@function asin($z, $unit-name: deg, $threshold: $default-threshold) {
    $sum: 0;
    $complement: false;
    $sign: if($z !=0, $z/abs($z), 1);
    $z: abs($z);

    @if $z>1 {
        @warn 'illegal `#{$z}` value for function';
        @return false;
    }

    @if $z>sin(pi()/4) {
        $complement: true;
        $z: sqrt(1 - pow($z, 2));
    }

    $term: $z;
    $i: 0;
    $k: 1;

    @while $term>$threshold {
        $sum: $sum + $term;

        $i: $i + 1;
        $k: $k*(2*$i - 1)/(2*$i);
        $j: 2*$i + 1;

        $term: $k*pow($z, $j)/$j;
    }

    @return convert-angle($sign*(if($complement, pi()/2 - $sum, $sum)), $unit-name);
}

@function acos($z, $unit-name: deg, $threshold: $default-threshold) {
    @return convert-angle(pi()/2, $unit-name) - asin($z, $unit-name, $threshold);
}

@function atan($z, $unit-name: deg, $threshold: $default-threshold) {
    @return asin($z/sqrt(1 + pow($z, 2)), $unit-name, $threshold);
}